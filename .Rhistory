# setdf2<-unique(df[which(df$nop==2 & df$score>=pg1t[2] & df$resp==1),c("vid","active_session","date")])
# setdf3<-unique(df[which(df$nop==3 & df$score>=pg1t[3] & df$resp==1),c("vid","active_session","date")])
# setdf4<-unique(df[which(df$nop>=4 & df$score>=pg1t[4] & df$resp==1),c("vid","active_session","date")])
#
# nrow(setdf1)
# nrow(setdf2[!duplicated(rbind(setdf1,setdf2))[-seq_len(nrow(setdf1))],])
# nrow(setdf3[!duplicated(rbind(setdf1,setdf2,setdf3))[-seq_len(nrow(setdf1)+nrow(setdf2))],])
# nrow(setdf4[!duplicated(rbind(setdf1,setdf2,setdf3,setdf4))[-seq_len(nrow(setdf1)+nrow(setdf2)+nrow(setdf3))],])
#plot(cbind(xx2$value[,2],-xx2$value[,1]), xlab="HL", ylab="CR", main="Objective space")
#print(xx2$par)
#plot(res$par, xlab="x1", ylab="x2", main="Parameter space")
#par(opar)
q()
power.prop.test(p1=0.2068,p2=0.2085,alternative='two-sided',power=0.8,sig.level=0.05)
power.prop.test(p1=0.2068,p2=0.2085,alternative='two.sided',power=0.8,sig.level=0.05)
power.prop.test(p1=0.342,p2=0.345,alternative='two.sided',power=0.8,sig.level=0.05)
power.prop.test(p1=0.2068,p2=0.2085,alternative='two.sided',power=0.8,sig.level=0.05)
power.prop.test(p1=0.197,p2=0.217,alternative='two.sided',power=0.8,sig.level=0.05)
power.prop.test(p1=0.207,p2=0.217,alternative='two.sided',power=0.8,sig.level=0.05)
help(power.prop.test)
power.prop.test(p1=0.207,p2=0.197,alternative='two.sided',power=0.8,sig.level=0.05)
t.test(0.207,0.208)
power.t.test(delta=0.1,sd=0.02,type="two.sample",alternative="two.sided")
power.t.test(delta=0.1,sd=0.02,type="two.sample",alternative="two.sided",sig.level=0.05,power=0.8)
power.t.test(delta=0.01,sd=0.02,type="two.sample",alternative="two.sided",sig.level=0.05,power=0.8)
power.t.test(delta=0.001,sd=0.02,type="two.sample",alternative="two.sided",sig.level=0.05,power=0.8)
?t.test
t.test
n=30000000
n*log(n)
long(n)
log(n)
q()
q()
q()
install.packages("adabag")
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE, mfinal=5)
iris.adaboost
library(adabag)
data(iris)
iris.adaboost <- boosting(Species~., data=iris, boos=TRUE, mfinal=5)
iris.adaboost
data(Vehicle)
l <- length(Vehicle[,1])
sub <- sample(1:l,2*l/3)
mfinal <- 10
maxdepth <- 5
Vehicle.rpart <- rpart(Class~.,data=Vehicle[sub,],maxdepth=maxdepth)
Vehicle.rpart.pred <- predict(Vehicle.rpart,newdata=Vehicle[-sub, ],type="class")
tb <- table(Vehicle.rpart.pred,Vehicle$Class[-sub])
error.rpart <- 1-(sum(diag(tb))/sum(tb))
tb
error.rpart
Vehicle.adaboost <- boosting(Class ~.,data=Vehicle[sub, ],mfinal=mfinal, coeflearn="Zhu",
control=rpart.control(maxdepth=maxdepth))
Vehicle.adaboost.pred <- predict.boosting(Vehicle.adaboost,newdata=Vehicle[-sub, ])
Vehicle.adaboost.pred$confusion
Vehicle.adaboost.pred$error
#comparing error evolution in training and test set
errorevol(Vehicle.adaboost,newdata=Vehicle[sub, ])->evol.train
errorevol(Vehicle.adaboost,newdata=Vehicle[-sub, ])->evol.test
plot.errorevol(evol.test,evol.train)
mfinal<-100
Vehicle.rpart <- rpart(Class~.,data=Vehicle[sub,],maxdepth=maxdepth)
Vehicle.rpart.pred <- predict(Vehicle.rpart,newdata=Vehicle[-sub, ],type="class")
tb <- table(Vehicle.rpart.pred,Vehicle$Class[-sub])
error.rpart <- 1-(sum(diag(tb))/sum(tb))
tb
error.rpart
Vehicle.adaboost <- boosting(Class ~.,data=Vehicle[sub, ],mfinal=mfinal, coeflearn="Zhu",
control=rpart.control(maxdepth=maxdepth))
Vehicle.adaboost.pred <- predict.boosting(Vehicle.adaboost,newdata=Vehicle[-sub, ])
Vehicle.adaboost.pred$confusion
Vehicle.adaboost.pred$error
#comparing error evolution in training and test set
errorevol(Vehicle.adaboost,newdata=Vehicle[sub, ])->evol.train
errorevol(Vehicle.adaboost,newdata=Vehicle[-sub, ])->evol.test
plot.errorevol(evol.test,evol.train)
mfinal<-1000
Vehicle.rpart <- rpart(Class~.,data=Vehicle[sub,],maxdepth=maxdepth)
Vehicle.rpart.pred <- predict(Vehicle.rpart,newdata=Vehicle[-sub, ],type="class")
tb <- table(Vehicle.rpart.pred,Vehicle$Class[-sub])
error.rpart <- 1-(sum(diag(tb))/sum(tb))
tb
error.rpart
Vehicle.adaboost <- boosting(Class ~.,data=Vehicle[sub, ],mfinal=mfinal, coeflearn="Zhu",
control=rpart.control(maxdepth=maxdepth))
Vehicle.adaboost.pred <- predict.boosting(Vehicle.adaboost,newdata=Vehicle[-sub, ])
Vehicle.adaboost.pred$confusion
Vehicle.adaboost.pred$error
#comparing error evolution in training and test set
errorevol(Vehicle.adaboost,newdata=Vehicle[sub, ])->evol.train
errorevol(Vehicle.adaboost,newdata=Vehicle[-sub, ])->evol.test
plot.errorevol(evol.test,evol.train)
Vehicle.adaboost
str(Vehicle.adaboost)
Vehicle.adaboost
q()
mtcars
mtcars1
mtcars1<-mtcars
mtcars$cars<-row.names(mtcars)
mtcars
library(reshape)
install.packages("reshape")
install.packages("h2o.Ensemble")
install.packages("h2oEnsemble")
library(devtools)
install_github("h2oai/h2o-2/R/ensemble/h2oEnsemble-package")
install.packages("devtools")
library(devtools)
install_github("h2oai/h2o-2/R/ensemble/h2oEnsemble-package")
install.packages("Rtools")
library(ROC)
roc
install.packages("ROC")
install.packages("roc")
install.packages("AUC")
library(AUC)
help(roc)
install.packages("pROC")
library(pROC)
help(roc)
data(aSAH)
# Basic example
roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
xx<-roc(aSAH$outcome, aSAH$s100b,
+     levels=c("Good", "Poor"))
xx<-roc(aSAH$outcome, aSAH$s100b,levels=c("Good", "Poor"))
xx
str(xx)
help(confusion.matrix)
q()
data(agaricus.train, package='xgboost')
#Both dataset are list with two items, a sparse matrix and labels
#(labels = outcome column which will be learned).
#Each column of the sparse Matrix is a feature in one hot encoding format.
train <- agaricus.train
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
#agaricus.test$data@Dimnames[[2]] represents the column names of the sparse matrix.
xgb.model.dt.tree(agaricus.train$data@Dimnames[[2]], model = bst)
require(xgboost)
data(agaricus.train, package='xgboost')
#Both dataset are list with two items, a sparse matrix and labels
#(labels = outcome column which will be learned).
#Each column of the sparse Matrix is a feature in one hot encoding format.
train <- agaricus.train
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
#agaricus.test$data@Dimnames[[2]] represents the column names of the sparse matrix.
xgb.model.dt.tree(agaricus.train$data@Dimnames[[2]], model = bst)
train
names(train)
names(train$data)
train$data
train[1,]
train$data[1,]
help(iris)
iris
train$label
summary(iris)
train$data<-iris[setdiff(names(iris),"Species")]
train$label<-iris$Species=='setosa'
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
tdata<-iris[setdiff(names(iris),"Species")]
tlabel<-iris$Species=='setosa'
#train <- agaricus.train
bst <- xgboost(data = tdata, label = tlabel, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
bst <- xgboost(data = xgb.DMatrix(tdata), label = tlabel, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
bst <- xgboost(data = xgb.DMatrix(as.matrix(tdata)), label = tlabel, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
tdata<-iris[setdiff(names(iris),"Species")]
tlabel<-ifelse(iris$Species=='setosa',1,0)
#train <- agaricus.train
bst <- xgboost(data = xgb.DMatrix(as.matrix(tdata)), label = tlabel, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
xgb.model.dt.tree(names(tdata$names), model = bst)
xgb.model.dt.tree(names(tdata), model = bst)
predict(model=bst,xgb.DMatrix(data=as.matrix(tdata), label = tlabel))
predict(model=bst,data=xgb.DMatrix(data=as.matrix(tdata), label = tlabel))
xgb.predict(model=bst,data=xgb.DMatrix(data=as.matrix(tdata), label = tlabel))
xgb.predict(bst,data=xgb.DMatrix(data=as.matrix(tdata), label = tlabel))
predict(bst,data=xgb.DMatrix(data=as.matrix(tdata), label = tlabel))
predict(bst,xgb.DMatrix(data=as.matrix(tdata), label = tlabel))
tdata[1,]
xgb.dump(bst,fname="tstmodel.txt")
25/(12.5+25)
25/(12.5+25) + 11.1258/(11.1258+5.86266)
(25/(12.5+25) + 11.1258/(11.1258+5.86266))/2
tdata[tdata$Petal.Length<2.45,]
nrow(tdata[tdata$Petal.Length<2.45,])
nrow(tlabel[tdata$Petal.Length<2.45,])
nrow(tlabel[tdata$Petal.Length<2.45])
sum(tlabel[tdata$Petal.Length<2.45])
tlabel[tdata$Petal.Length<2.45]
sum(tlabel)
tlabel
length(tlabel)
tlabel[tdata$Petal.Length>=2.45]
summary(tdata$Petal.Length)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=1)
xgb.dump(bst,fname="tstmodel.txt")
predict(bst,xgb.DMatrix(data=as.matrix(tdata), label = tlabel))
tlabel[tdata$Petal.Length<2.45]
sum(tlabel[tdata$Petal.Length<2.45])
sum(tlabel)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)))
help("xgb.cv")
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=2)
help(xgboost)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=0.8)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=2)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
require(rpart)
help(rpart)
sum(tlabel[tdata$Petal.Length>=2.45])
dt
dt1
tdata
names(tdata)
tdata1<-cbind(tdata,tlabel)
names(tdata)
names(tdata1)
dt1<-rpart(tlabel~.,data=tdata1)
dt1
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=0.8, booster="gbtree")
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=2)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=1.0, booster="gbtree")
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=0.8, booster="gbtree")
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=2)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=0)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree")
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 10,objective = "binary:logistic", subsample=1.0, booster="gbtree")
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=10)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree")
xgb.dump(bst)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", eval_metric="error")
xgb.dump(bst)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", eval_metric="logloss")
xgb.dump(bst)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1,sketch_eps=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1,sketch_eps=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=1), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=[0,1]), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=c(0,1), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=c(0,1)), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=tlabel), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
sum(tlabel)
sum(tlabel)/length(tlabel)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=1/3), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=rep(1/3,150)), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
sum(tlabel)/length(tlabel)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=tlabel/150), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=rep(0,150)), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel, base_margin=rep(1,150)), max.depth = 2,
eta = 1, nround = 1,objective = "binary:logistic", subsample=1.0, booster="gbtree", lambda=0,sketch_eps=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
xgb.model.dt.tree(names(tdata), model = bst)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),predleaf=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1,predleaf=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),ntreelimit=2)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=0.8, booster="gbtree")
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),predleaf=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE,predleaf=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)
xgb.dump(model=bst)
xgb.model.dt.tree(feature_names = names(tdata),model=bst)
exp(2.779088)/(exp(2.779088)+exp(-2.932934))
predict(bst,xgb.DMatrix(data=as.matrix(tdata)))
exp(2.779088)/(exp(2.779088)+1)
1/(1+exp(-2.932934))
1/(1+exp(2.932934))
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", base_score=1/3)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)))
1/(1+exp(predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)))
1/(1+exp(-predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)))
require(xgboost)
data(agaricus.train, package='xgboost')
#Both dataset are list with two items, a sparse matrix and labels
#(labels = outcome column which will be learned).
#Each column of the sparse Matrix is a feature in one hot encoding format.
tdata<-iris[setdiff(names(iris),"Species")]
tlabel<-ifelse(iris$Species=='setosa',1,0)
#train <- agaricus.train
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=1.0, booster="gbtree")
require(xgboost)
data(agaricus.train, package='xgboost')
#Both dataset are list with two items, a sparse matrix and labels
#(labels = outcome column which will be learned).
#Each column of the sparse Matrix is a feature in one hot encoding format.
tdata<-iris[setdiff(names(iris),"Species")]
tlabel<-ifelse(iris$Species=='setosa',1,0)
#train <- agaricus.train
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=1.0, booster="gbtree")
xgb.dump(model=bst)
xgb.model.dt.tree(feature_names=names(tdata),model=bst)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),predleaf=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)
exp(2.840212)/(exp(2.840212)+exp(-2.974711))
predict(bst,xgb.DMatrix(data=as.matrix(tdata)))
exp(2.840212)/(exp(2.840212)+1
)
exp(-2.974711)/(exp(-2.974711)+1)
require(xgboost)
data(agaricus.train, package='xgboost')
#Both dataset are list with two items, a sparse matrix and labels
#(labels = outcome column which will be learned).
#Each column of the sparse Matrix is a feature in one hot encoding format.
tdata<-iris[setdiff(names(iris),"Species")]
tlabel<-ifelse(iris$Species=='setosa',1,0)
#train <- agaricus.train
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 0.1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=0.8, booster="gbtree")
xgb.dump(model=bst)
xgb.model.dt.tree(feature_names=names(tdata),model=bst)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)))
1/(1+exp(-0.3501102))
1/(1+exp(0.3649641))
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE,ntreelimi1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE,ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),predleaf=TRUE,ntreelimit=1)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE,ntreelimit=2)
0.181818+0.168292
q()
install.packages("V8")
Sys.getenv("R_USER")
require(xgboost)
data(agaricus.train, package='xgboost')
#Both dataset are list with two items, a sparse matrix and labels
#(labels = outcome column which will be learned).
#Each column of the sparse Matrix is a feature in one hot encoding format.
tdata<-iris[setdiff(names(iris),"Species")]
tlabel<-ifelse(iris$Species=='setosa',1,0)
#train <- agaricus.train
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 0.1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=0.8, booster="gbtree")
#agaricus.test$data@Dimnames[[2]] represents the column names of the sparse matrix.
xgb.dump(model=bst)
xgb.model.dt.tree(feature_names=names(tdata),model=bst)
xdt<-xgb.model.dt.tree(feature_names=names(tdata),model=bst)
xdt$Quality[xdt$Feature=='Leaf']
format(xdt$Quality[xdt$Feature=='Leaf'],nsmall=10)
help(xgb.dump)
options(digits=10)
xgb.dump(model=bst)
xgb.model.dt.tree(feature_names=names(tdata),model=bst)
xdt$Quality[xdt$Feature=='Leaf']
format(xdt$Quality[xdt$Feature=='Leaf'],nsmall=10)
help(xgb.model.dt.tree)
xgb.model.dt.tree
text = xgb.dump(model = bst, with.stats = T)
text
?xgb.dump
xgb.dump
XGBoosterDumpModel_R
require(xgboost)
data(agaricus.train, package='xgboost')
tdata<-iris[setdiff(names(iris),"Species")]
tlabel<-ifelse(iris$Species=='setosa',1,0)
bst <- xgboost(data = xgb.DMatrix(data=as.matrix(tdata), label = tlabel), max.depth = 2,
eta = 0.1, nthread = 2, nround = 2,objective = "binary:logistic", subsample=0.8, booster="gbtree")
xgb.dump(model=bst)
xgb.model.dt.tree(feature_names=names(tdata),model=bst)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)
predict(bst,xgb.DMatrix(data=as.matrix(tdata)))
1/(1+exp(-predict(bst,xgb.DMatrix(data=as.matrix(tdata)),outputmargin=TRUE)))
x<- hash( a=1, b=2, c=3 )
library(hash)
install.packages("hash")
install.packages("hash")
library(hash)
x<- hash( a=1, b=2, c=3 )
x
x[["a"]]
setwd("~/Kaggle/GBID")
library(data.table)
d1<-fread('impute_v2_res1.csv')
d2<-fread('impute_v6_res1.csv')
d1
d2
setkey(d1,'id')
keys(d1)
key(d1)
setkey(d2,'id')
d1
d2
d1[d2]
d1
d12<-d1[d2]
d12
d12[,Demanda_uni_equil:=0.5*Demanda_uni_equil+0.5*i.Demanda_uni_equil]
d12
d12[,i.Demanda_uni_equil:=NULL]
d12
fwrite(d12,'impute_v2_v6_res.csv')
require(rreadr)
require(readr)
fwrite(d12,'impute_v2_v6_res.csv')
library(data.table)
fwrite(d12,'impute_v2_v6_res.csv')
help(fread)
write.csv(d12,file='impute_v2_v6_res1.csv',row.names=F)
d1<-fread('impute_v2_res1.csv')
d2<-fread('impute_v6_res1.csv')
d3<-fread('results2.csv')
setkey(d1,'id')
setkey(d2,'id')
d12<-d1[d2]
setkey(d12,'id')
d123<-d12[d3]
d123[,Demanda_uni_equil:=0.34*Demanda_uni_equil+0.33*i.Demanda_uni_equil+0.33*ii.Demanda_uni_equil]
d123[,i.Demanda_uni_equil:=NULL]
d123[,ii.Demanda_uni_equil:=NULL]
d123
d12
d1<-fread('impute_v2_res1.csv')
d2<-fread('impute_v6_res1.csv')
d3<-fread('results2.csv')
d1[,d1:=Demanda_uni_equil]
d2[,d2:=Demanda_uni_equil]
d3[,d3:=Demanda_uni_equil]
setkey(d1,'id')
setkey(d2,'id')
d12<-d1[d2]
setkey(d12,'id')
d123<-d12[d3]
d123[,Demanda_uni_equil:=0.34*d1+0.33*d2+0.33*d3]
d123[,d1:=NULL]
d123[,d2:=NULL]
d123[,d3:=NULL]
d123
d1
d1<-fread('impute_v2_res1.csv')
d2<-fread('impute_v6_res1.csv')
d3<-fread('results2.csv')
d1[,d1:=Demanda_uni_equil]
d2[,d2:=Demanda_uni_equil]
d3[,d3:=Demanda_uni_equil]
d1[,Demanda_uni_equil:=NULL]
d2[,Demanda_uni_equil:=NULL]
d3[,Demanda_uni_equil:=NULL]
setkey(d1,'id')
setkey(d2,'id')
d12<-d1[d2]
setkey(d12,'id')
setkey(d3,'id')
d123<-d12[d3]
d123[,Demanda_uni_equil:=0.34*d1+0.33*d2+0.33*d3]
d123[,d1:=NULL]
d123[,d2:=NULL]
d123[,d3:=NULL]
d123
d1
d2
d3
write.csv(d123,file='impute_v2_v6_results2_res1.csv',row.names=F)
d123
d1
d2
d3
